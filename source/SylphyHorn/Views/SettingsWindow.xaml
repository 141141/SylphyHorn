<metro:MetroWindow x:Class="SylphyHorn.Views.SettingsWindow"
				   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
				   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				   xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
				   xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
				   xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
				   xmlns:livet="http://schemas.livet-mvvm.net/2011/wpf"
				   xmlns:metro="http://schemes.grabacr.net/winfx/2014/controls"
				   xmlns:vm="clr-namespace:SylphyHorn.ViewModels"
				   xmlns:controls="clr-namespace:SylphyHorn.Views.Controls"
				   xmlns:models="clr-namespace:SylphyHorn.Models"
				   mc:Ignorable="d"
				   d:DataContext="{d:DesignInstance vm:SettingsWindowViewModel}"
				   Title="{Binding Title}"
				   Width="640"
				   Height="480"
				   Background="{DynamicResource ThemeBrushKey}"
				   Foreground="{DynamicResource ActiveForegroundBrushKey}"
				   FontFamily="{DynamicResource DefaultFontFamilyKey}"
				   SnapsToDevicePixels="True"
				   TextOptions.TextFormattingMode="Display"
				   UseLayoutRounding="True">

	<i:Interaction.Behaviors>
		<livet:WindowCloseCancelBehavior CloseCanceledCallbackMethodTarget="{Binding}"
										 CloseCanceledCallbackMethodName="CloseCanceledCallback"
										 CanClose="{Binding CanClose}" />
	</i:Interaction.Behaviors>

	<i:Interaction.Triggers>
		<i:EventTrigger EventName="ContentRendered">
			<livet:LivetCallMethodAction MethodTarget="{Binding}"
										 MethodName="Initialize" />
		</i:EventTrigger>
		<i:EventTrigger EventName="Closed">
			<livet:DataContextDisposeAction />
		</i:EventTrigger>

		<livet:InteractionMessageTrigger Messenger="{Binding Messenger}"
										 MessageKey="Window.WindowAction">
			<livet:WindowInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False" />
		</livet:InteractionMessageTrigger>
		<livet:InteractionMessageTrigger Messenger="{Binding Messenger}"
										 MessageKey="Window.Transition">
			<livet:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"
													  IsOwned="False" />
		</livet:InteractionMessageTrigger>
		<livet:InteractionMessageTrigger Messenger="{Binding Messenger}"
										 MessageKey="Window.Transition.Child">
			<livet:TransitionInteractionMessageAction InvokeActionOnlyWhenWindowIsActive="False"
													  IsOwned="True" />
		</livet:InteractionMessageTrigger>
	</i:Interaction.Triggers>

	<DockPanel>
		<!-- #region Caption area -->
		<DockPanel DockPanel.Dock="Top"
				   metro:MetroWindow.IsCaptionBar="True">
			<Border DockPanel.Dock="Bottom"
					Height="8" />

			<StackPanel DockPanel.Dock="Right"
						Orientation="Horizontal"
						HorizontalAlignment="Right"
						VerticalAlignment="Top"
						WindowChrome.IsHitTestVisibleInChrome="True">
				<metro:SystemButtons />
			</StackPanel>
			<TextBlock Text="{Binding Title}"
					   Style="{DynamicResource CaptionTextStyleKey}"
					   Margin="12,8" />
		</DockPanel>
		<!-- #endregion -->

		<TabControl Style="{DynamicResource VerticalTabControlStyleKey}">
			<TabItem>
				<TabItem.Header>
					<TextBlock Text="General"
							   Style="{DynamicResource VerticalTabHeaderTextStyleKey}" />
				</TabItem.Header>

				<ScrollViewer HorizontalScrollBarVisibility="Disabled"
							  VerticalScrollBarVisibility="Auto">
					<StackPanel Margin="16,0,16,16">
						<Panel.Resources>
							<Style TargetType="{x:Type TextBlock}"
								   BasedOn="{StaticResource DefaultTextStyleKey}">
								<Setter Property="Margin"
										Value="0,2" />
							</Style>
						</Panel.Resources>

						<CheckBox IsChecked="{Binding Source={x:Static models:GeneralSettings.LoopDesktop}, Path=Value, Mode=TwoWay}">
							<TextBlock Text="Loop virtual desktops." />
						</CheckBox>
						<CheckBox IsChecked="{Binding Source={x:Static models:GeneralSettings.NotificationWhenSwitchedDesktop}, Path=Value, Mode=TwoWay}">
							<TextBlock Text="Display a notification when switched virtual desktop." />
						</CheckBox>
					</StackPanel>
				</ScrollViewer>
			</TabItem>

			<TabItem>
				<TabItem.Header>
					<TextBlock Text="Shortcut"
							   Style="{DynamicResource VerticalTabHeaderTextStyleKey}" />
				</TabItem.Header>

				<ScrollViewer HorizontalScrollBarVisibility="Disabled"
							  VerticalScrollBarVisibility="Auto">
					<StackPanel Margin="16,0,16,16"
								Grid.IsSharedSizeScope="True">
						<Panel.Resources>
							<Style TargetType="{x:Type TextBlock}"
								   BasedOn="{StaticResource DefaultTextStyleKey}">
								<Setter Property="Margin"
										Value="0,1,0,0" />
							</Style>
						</Panel.Resources>

						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"
												  SharedSizeGroup="KeyHeader" />
								<ColumnDefinition Width="8" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<UniformGrid Columns="1">
								<TextBlock Text="Move to left:" />
								<TextBlock Text="Move to left (and switch):" />
								<TextBlock Text="Move to right:" />
								<TextBlock Text="Move to right (and switch):" />
							</UniformGrid>
							<UniformGrid Grid.Column="2"
										 Columns="1">
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveLeft}, Path=Value, Mode=TwoWay}" />
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveLeftAndSwitch}, Path=Value, Mode=TwoWay}" />
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveRight}, Path=Value, Mode=TwoWay}" />
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveRightAndSwitch}, Path=Value, Mode=TwoWay}" />
							</UniformGrid>
						</Grid>
						<Border Height="8" />
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"
												  SharedSizeGroup="KeyHeader" />
								<ColumnDefinition Width="8" />
								<ColumnDefinition Width="*" />
							</Grid.ColumnDefinitions>
							<UniformGrid Columns="1">
								<TextBlock Text="Create and move to:" />
								<TextBlock Text="Create and move to (and switch):" />
							</UniformGrid>
							<UniformGrid Grid.Column="2"
										 Columns="1">
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveNew}, Path=Value, Mode=TwoWay}" />
								<controls:ShortcutKeyBox Current="{Binding Source={x:Static models:ShortcutSettings.MoveNewAndSwitch}, Path=Value, Mode=TwoWay}" />
							</UniformGrid>
						</Grid>
					</StackPanel>
				</ScrollViewer>
			</TabItem>

			<TabItem>
				<TabItem.Header>
					<TextBlock Text="Version"
							   Style="{DynamicResource VerticalTabHeaderTextStyleKey}" />
				</TabItem.Header>

			</TabItem>
		</TabControl>
	</DockPanel>
</metro:MetroWindow>
